{"version":3,"sources":["../src/cli.js"],"names":["require","format","load","lint","read","chalk","meow","merge","pick","stdin","pkg","help","configuration","string","boolean","alias","c","d","e","f","t","q","h","g","v","x","p","description","color","cwd","config","edit","extends","from","to","quiet","default","process","unknown","arg","Error","cli","name","version","main","catch","setTimeout","err","type","exit","options","raw","input","flags","normalizeFlags","fromStdin","checkFromStdin","range","fmt","constructor","enabled","messages","Array","isArray","filter","message","Boolean","length","checkFromRepository","console","log","loadOpts","file","getSeed","loaded","parserOpts","selectParserOpts","parserPreset","opts","commentChar","Promise","all","map","rules","report","formatted","grey","bold","split","join","errors","error","checkFromHistory","checkFromEdit","normalizeEdit","env","GIT_PARAMS","seed","n","i","undefined","on","reason","promise"],"mappings":"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","file":"cli.js","sourcesContent":["\nrequire('babel-polyfill'); // eslint-disable-line import/no-unassigned-import\n\nconst format = require('@commitlint/format');\nconst load = require('@commitlint/load');\nconst lint = require('@commitlint/lint');\nconst read = require('@commitlint/read');\nconst chalk = require('chalk');\nconst meow = require('meow');\nconst merge = require('lodash.merge');\nconst pick = require('lodash.pick');\nconst stdin = require('get-stdin');\n\nconst pkg = require('../package');\nconst help = require('./help');\n\nconst configuration = {\n\tstring: ['cwd', 'from', 'to', 'edit', 'extends', 'parser-preset', 'config'],\n\tboolean: ['help', 'version', 'quiet', 'color'],\n\talias: {\n\t\tc: 'color',\n\t\td: 'cwd',\n\t\te: 'edit',\n\t\tf: 'from',\n\t\tt: 'to',\n\t\tq: 'quiet',\n\t\th: 'help',\n\t\tg: 'config',\n\t\tv: 'version',\n\t\tx: 'extends',\n\t\tp: 'parser-preset'\n\t},\n\tdescription: {\n\t\tcolor: 'toggle colored output',\n\t\tcwd: 'directory to execute in',\n\t\tconfig: 'path to the config file',\n\t\tedit:\n\t\t\t'read last commit message from the specified file or fallbacks to ./.git/COMMIT_EDITMSG',\n\t\textends: 'array of shareable configurations to extend',\n\t\tfrom: 'lower end of the commit range to lint; applies if edit=false',\n\t\tto: 'upper end of the commit range to lint; applies if edit=false',\n\t\tquiet: 'toggle console output',\n\t\t'parser-preset':\n\t\t\t'configuration preset to use for conventional-commits-parser'\n\t},\n\tdefault: {\n\t\tcolor: true,\n\t\tcwd: process.cwd(),\n\t\tconfig: null,\n\t\tedit: false,\n\t\tfrom: null,\n\t\tto: null,\n\t\tquiet: false\n\t},\n\tunknown(arg) {\n\t\tthrow new Error(`unknown flags: ${arg}`);\n\t}\n};\n\nconst cli = meow(\n\t{\n\t\thelp: `[input] reads from stdin if --edit, --from and --to are omitted\\n${help(\n\t\t\tconfiguration\n\t\t)}`,\n\t\tdescription: `${pkg.name}@${pkg.version} - ${pkg.description}`\n\t},\n\tconfiguration\n);\n\nmain(cli).catch(err =>\n\tsetTimeout(() => {\n\t\tif (err.type === pkg.name) {\n\t\t\tprocess.exit(1);\n\t\t}\n\t\tthrow err;\n\t})\n);\n\nasync function main(options) {\n\tconst raw = options.input;\n\tconst flags = normalizeFlags(options.flags);\n\tconst fromStdin = checkFromStdin(raw, flags);\n\n\tconst range = pick(flags, 'edit', 'from', 'to');\n\tconst fmt = new chalk.constructor({enabled: flags.color});\n\n\tconst input = await (fromStdin ? stdin() : read(range, {cwd: flags.cwd}));\n\n\tconst messages = (Array.isArray(input) ? input : [input])\n\t\t.filter(message => typeof message === 'string')\n\t\t.filter(Boolean);\n\n\tif (messages.length === 0 && !checkFromRepository(flags)) {\n\t\tconst err = new Error(\n\t\t\t'[input] is required: supply via stdin, or --edit or --from and --to'\n\t\t);\n\t\terr.type = pkg.name;\n\t\tconsole.log(`${cli.help}\\n`);\n\t\tconsole.log(err.message);\n\t\tthrow err;\n\t}\n\n\tconst loadOpts = {cwd: flags.cwd, file: flags.config};\n\tconst loaded = await load(getSeed(flags), loadOpts);\n\tconst parserOpts = selectParserOpts(loaded.parserPreset);\n\tconst opts = parserOpts ? {parserOpts} : {parserOpts: {}};\n\n\t// Strip comments if reading from `.git/COMMIT_EDIT_MSG`\n\tif (range.edit) {\n\t\topts.parserOpts.commentChar = '#';\n\t}\n\n\treturn Promise.all(\n\t\tmessages.map(async message => {\n\t\t\tconst report = await lint(message, loaded.rules, opts);\n\t\t\tconst formatted = format(report, {color: flags.color});\n\n\t\t\tif (!flags.quiet) {\n\t\t\t\tconsole.log(\n\t\t\t\t\t`${fmt.grey('â§—')}   input: ${fmt.bold(message.split('\\n')[0])}`\n\t\t\t\t);\n\t\t\t\tconsole.log(formatted.join('\\n'));\n\t\t\t}\n\n\t\t\tif (report.errors.length > 0) {\n\t\t\t\tconst error = new Error(formatted[formatted.length - 1]);\n\t\t\t\terror.type = pkg.name;\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tconsole.log('');\n\t\t})\n\t);\n}\n\nfunction checkFromStdin(input, flags) {\n\treturn input.length === 0 && !checkFromRepository(flags);\n}\n\nfunction checkFromRepository(flags) {\n\treturn checkFromHistory(flags) || checkFromEdit(flags);\n}\n\nfunction checkFromEdit(flags) {\n\treturn Boolean(flags.edit);\n}\n\nfunction checkFromHistory(flags) {\n\treturn typeof flags.from === 'string' || typeof flags.to === 'string';\n}\n\nfunction normalizeFlags(flags) {\n\t// The `edit` flag is either a boolean or a string but we are only allowed\n\t// to specify one of them in minimist\n\tconst edit = flags.edit === '' ? true : normalizeEdit(flags.edit);\n\treturn merge({}, flags, {edit, e: edit});\n}\n\nfunction normalizeEdit(edit) {\n\tif (typeof edit === 'boolean') {\n\t\treturn edit;\n\t}\n\t// The recommended method to specify -e with husky is commitlint -e $GIT_PARAMS\n\t// This does not work properly with win32 systems, where env variable declarations\n\t// use a different syntax\n\t// See https://github.com/marionebl/commitlint/issues/103 for details\n\tif (edit === '$GIT_PARAMS' || edit === '%GIT_PARAMS%') {\n\t\tif (!('GIT_PARAMS' in process.env)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Received ${edit} as value for -e | --edit, but GIT_PARAMS is not available globally.`\n\t\t\t);\n\t\t}\n\t\treturn process.env.GIT_PARAMS;\n\t}\n\treturn edit;\n}\n\nfunction getSeed(seed) {\n\tconst e = Array.isArray(seed.extends) ? seed.extends : [seed.extends];\n\tconst n = e.filter(i => typeof i === 'string');\n\treturn n.length > 0\n\t\t? {extends: n, parserPreset: seed.parserPreset}\n\t\t: {parserPreset: seed.parserPreset};\n}\n\nfunction selectParserOpts(parserPreset) {\n\tif (typeof parserPreset !== 'object') {\n\t\treturn undefined;\n\t}\n\n\tif (typeof parserPreset.parserOpts !== 'object') {\n\t\treturn undefined;\n\t}\n\n\treturn parserPreset.parserOpts;\n}\n\n// Catch unhandled rejections globally\nprocess.on('unhandledRejection', (reason, promise) => {\n\tconsole.log('Unhandled Rejection at: Promise ', promise, ' reason: ', reason);\n\tthrow reason;\n});\n"]}