{
  "_args": [
    [
      {
        "raw": "@semantic-release/commit-analyzer@^5.0.0",
        "scope": "@semantic-release",
        "escapedName": "@semantic-release%2fcommit-analyzer",
        "name": "@semantic-release/commit-analyzer",
        "rawSpec": "^5.0.0",
        "spec": ">=5.0.0 <6.0.0",
        "type": "range"
      },
      "/Users/nuttapong/Documents/chromeless_bin/node_modules/semantic-release"
    ]
  ],
  "_from": "@semantic-release/commit-analyzer@>=5.0.0 <6.0.0",
  "_id": "@semantic-release/commit-analyzer@5.0.3",
  "_inCache": true,
  "_location": "/@semantic-release/commit-analyzer",
  "_nodeVersion": "8.10.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/commit-analyzer_5.0.3_1521730338496_0.45668431271441934"
  },
  "_npmUser": {
    "name": "semantic-release-bot",
    "email": "semantic-release@boennemann.me"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {
    "compare-func": "1.3.2",
    "ms": "2.0.0",
    "q": "1.5.1"
  },
  "_requested": {
    "raw": "@semantic-release/commit-analyzer@^5.0.0",
    "scope": "@semantic-release",
    "escapedName": "@semantic-release%2fcommit-analyzer",
    "name": "@semantic-release/commit-analyzer",
    "rawSpec": "^5.0.0",
    "spec": ">=5.0.0 <6.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/semantic-release"
  ],
  "_resolved": "https://registry.npmjs.org/@semantic-release/commit-analyzer/-/commit-analyzer-5.0.3.tgz",
  "_shasum": "f2b674d30207b49b77d905ad5850d7aefd8838dd",
  "_shrinkwrap": null,
  "_spec": "@semantic-release/commit-analyzer@^5.0.0",
  "_where": "/Users/nuttapong/Documents/chromeless_bin/node_modules/semantic-release",
  "author": {
    "name": "Pierre Vanduynslager",
    "url": "https://twitter.com/@pvdlg_"
  },
  "bugs": {
    "url": "https://github.com/semantic-release/commit-analyzer/issues"
  },
  "config": {
    "commitizen": {
      "path": "cz-conventional-changelog"
    }
  },
  "contributors": [
    {
      "name": "Stephan BÃ¶nnemann",
      "email": "stephan@boennemann.me",
      "url": "http://boennemann.me"
    },
    {
      "name": "Gregor Martynus",
      "url": "https://twitter.com/gr2m"
    }
  ],
  "dependencies": {
    "conventional-changelog-angular": "^3.0.0",
    "conventional-commits-parser": "^2.0.0",
    "debug": "^3.1.0",
    "import-from": "^2.1.0",
    "lodash": "^4.17.4"
  },
  "description": "Customizable commit-analyzer plugin for semantic-release",
  "devDependencies": {
    "ava": "^0.25.0",
    "codecov": "^3.0.0",
    "commitizen": "^2.9.6",
    "conventional-changelog-atom": "^0.2.0",
    "conventional-changelog-ember": "^0.3.0",
    "conventional-changelog-eslint": "^1.0.0",
    "conventional-changelog-express": "^0.3.0",
    "conventional-changelog-jshint": "^0.3.0",
    "cz-conventional-changelog": "^2.0.0",
    "nyc": "^11.1.0",
    "rimraf": "^2.6.1",
    "semantic-release": "^15.0.0",
    "sinon": "^5.0.0",
    "xo": "^0.20.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-4GLFDmp8Up+f4GQGPIzLVd8X9a3yqbZjl761sEdfCH4e5FkEO3I9XRlTEfKSueeCt5OA1lZBb9IHGpZ6Ot0+BQ==",
    "shasum": "f2b674d30207b49b77d905ad5850d7aefd8838dd",
    "tarball": "https://registry.npmjs.org/@semantic-release/commit-analyzer/-/commit-analyzer-5.0.3.tgz",
    "fileCount": 10,
    "unpackedSize": 23530
  },
  "engines": {
    "node": ">=8.3"
  },
  "files": [
    "lib",
    "index.js"
  ],
  "gitHead": "70fbe21b2c39bf08fdd2c3d85f37159b818794ba",
  "homepage": "https://github.com/semantic-release/commit-analyzer#readme",
  "keywords": [
    "changelog",
    "commit-analyzer",
    "conventional-changelog",
    "conventional-commits",
    "github",
    "publish",
    "release",
    "semantic-release"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "boennemann",
      "email": "stephan@boennemann.me"
    },
    {
      "name": "christophwitzko",
      "email": "npm@christophwitzko.com"
    },
    {
      "name": "gr2m",
      "email": "gregor@martynus.net"
    },
    {
      "name": "semantic-release-bot",
      "email": "semantic-release@boennemann.me"
    }
  ],
  "name": "@semantic-release/commit-analyzer",
  "nyc": {
    "include": [
      "lib/**/*.js",
      "index.js"
    ],
    "reporter": [
      "json",
      "text",
      "html"
    ],
    "all": true
  },
  "optionalDependencies": {},
  "prettier": {
    "printWidth": 120
  },
  "publishConfig": {
    "access": "public",
    "tag": "next"
  },
  "readme": "# **commit-analyzer**\n\nCustomizable commit-analyzer plugin for [semantic-release](https://github.com/semantic-release/semantic-release) based on [conventional-changelog](https://github.com/conventional-changelog/conventional-changelog)\n\n[![Travis](https://img.shields.io/travis/semantic-release/commit-analyzer.svg)](https://travis-ci.org/semantic-release/commit-analyzer)\n[![Codecov](https://img.shields.io/codecov/c/github/semantic-release/commit-analyzer.svg)](https://codecov.io/gh/semantic-release/commit-analyzer)\n[![Greenkeeper badge](https://badges.greenkeeper.io/semantic-release/commit-analyzer.svg)](https://greenkeeper.io/)\n\n[![npm latest version](https://img.shields.io/npm/v/@semantic-release/commit-analyzer/latest.svg)](https://www.npmjs.com/package/@semantic-release/commit-analyzer)\n[![npm next version](https://img.shields.io/npm/v/@semantic-release/commit-analyzer/next.svg)](https://www.npmjs.com/package/@semantic-release/commit-analyzer)\n\n## Options\n\nBy default `commit-analyzer` uses the `angular` format described in [Angular convention](https://github.com/conventional-changelog/conventional-changelog/blob/master/packages/conventional-changelog-angular) and the [default rules](lib/default-release-rules.js) for release.\n\nAdditional options can be set within the plugin definition in `package.json` to use a different commit format and to customize it:\n\n```json\n{\n  \"release\": {\n    \"analyzeCommits\": {\n      \"preset\": \"angular\",\n      \"releaseRules\": [\n        {\"type\": \"docs\", \"scope\":\"README\", \"release\": \"patch\"},\n        {\"type\": \"refactor\", \"release\": \"patch\"},\n        {\"type\": \"style\", \"release\": \"patch\"}\n      ],\n      \"parserOpts\": {\n        \"noteKeywords\": [\"BREAKING CHANGE\", \"BREAKING CHANGES\", \"BREAKING\"]\n      }\n    }\n  }\n}\n```\n\n| Option         | Description                                                                                                                                                                                                                                                                                        | Default                             |\n|----------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------|\n| `preset`       | [conventional-changelog](https://github.com/conventional-changelog/conventional-changelog) preset (possible values: `angular`, `atom`, `codemirror`, `ember`, `eslint`, `express`, `jquery`, `jscs`, `jshint`).                                                                                    | `angular`                           |\n| `config`       | NPM package name of a custom [conventional-changelog](https://github.com/conventional-changelog/conventional-changelog) preset.                                                                                                                                                                    | -                                   |\n| `releaseRules` | An external module, a path to a module or an `Array` of rules. See [Release rules](#release-rules).                                                                                                                                                                                                | See [Release rules](#release-rules) |\n| `parserOpts`   | Additional [conventional-commits-parser](https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-commits-parser#conventionalcommitsparseroptions) options that will extends ones loaded by `preset` or `config`. See [Parser options](#parser-options). | -                                   |\n\n**NOTE:** `config` will be overwritten by the values of `preset`. You should use either `preset` or `config`, but not both. Individual properties of `parserOpts` will overwrite ones loaded with `preset` or `config`.\n\n### Release Rules\n\nRelease rules are used when deciding if the commits since the last release warrant a new release. If you define custom release rules the default rules will be used if nothing matched. Those rules will be matched against the commit objects resulting of [conventional-commits-parser](https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-commits-parser) parsing.\n\nRelease rules are used when deciding if the commits since the last release warrant a new release. If you define custom release rules the [default rules](lib/default-release-rules.js) will be used if nothing matched.\n\n#### Rules definition\nThis is an `Array` of rule objects. A rule object has a `release` property and 1 or more criteria.\n```json\n{\n  \"release\": {\n    \"analyzeCommits\": {\n      \"preset\": \"angular\",\n      \"releaseRules\": [\n        {\"type\": \"docs\", \"scope\": \"README\", \"release\": \"patch\"},\n        {\"type\": \"refactor\", \"scope\": \"/core-.*/\", \"release\": \"minor\"},\n        {\"type\": \"refactor\", \"release\": \"patch\"}\n      ]\n    }\n  }\n}\n```\n#### Rules matching\n\nEach commit will be compared with each rule and when it matches, the commit will be associated with the release type in the rule's `release` property. If a commit match multiple rules, the highest release type (`major` > `minor` > `patch`) is associated with the commit.\n\nSee [release types](lib/default-release-types.js) for the release types hierarchy.\n\nWith the previous example:\n- Commits with `type` 'docs' and `scope` 'README' will be associated with a `patch` release.\n- Commits with `type` 'refactor' and `scope` starting with 'core-' (i.e. 'core-ui', 'core-rules', ...) will be associated with a `minor` release.\n- Other commits with `type` 'refactor' (without `scope` or with a `scope` not matching the regexp `/core-.*/`) will be associated with a `patch` release.\n\n#### Default rules matching\n\nIf a commit doesn't match any rule in `releaseRules` it will be evaluated against the [default release rules](lib/default-release-rules.js).\n\nWith the previous example:\n- Commits with a breaking change will be associated with a `minor` release.\n- Commits with `type` 'feat' will be associated with a `minor` release.\n- Commits with `type` 'fix' will be associated with a `patch` release.\n- Commits with `type` 'perf' will be associated with a `patch` release.\n\n#### No rules matching\n\nIf a commit doesn't match any rules in `releaseRules` or in [default release rules](lib/default-release-rules.js) then no release type will be associated with the commit.\n\nWith the previous example:\n- Commits with `type` 'style' will not be associated with a release type.\n- Commits with `type` 'test' will not be associated with a release type.\n- Commits with `type` 'chore' will not be associated with a release type.\n\n#### Multiple commits\n\nIf there is multiple commits that match one or more rules, the one with the highest release type will determine the global release type.\n\nConsidering the following commits:\n- `docs(README): Add more details to the API docs`\n- `feat(API): Add a new method to the public API`\n\nWith the previous example the release type determine by the plugin will be `minor`.\n\n#### Specific commit properties\n\nThe properties to set in the rules will depends on the commit style chosen. For example [conventional-changelog-angular](https://github.com/conventional-changelog/conventional-changelog/blob/master/packages/conventional-changelog-angular/index.js#L9-L13) use the commit properties `type`, `scope` and `subject` but [conventional-changelog-eslint](https://github.com/conventional-changelog/conventional-changelog/blob/master/packages/conventional-changelog-eslint/index.js#L9-L12) uses `tag` and `message`.\n\nFor example with `eslint` preset:\n```json\n{\n  \"release\": {\n    \"analyzeCommits\": {\n      \"preset\": \"eslint\",\n      \"releaseRules\": [\n        {\"tag\": \"Docs\", \"message\":\"/README/\", \"release\": \"patch\"},\n        {\"type\": \"New\", \"release\": \"patch\"}\n      ]\n    }\n  }\n}\n```\nWith this configuration:\n- Commits with `tag` 'Docs', that contains 'README' in their header message will be associated with a `patch` release.\n- Commits with `tag` 'New' will be associated with a `patch` release.\n- Commits with `tag` 'Breaking' will be associated with a `major` release (per [default release rules](lib/default-release-rules.js)).\n- Commits with `tag` 'Fix' will be associated with a `patch` release (per [default release rules](lib/default-release-rules.js)).\n- Commits with `tag` 'Update' will be associated with a `minor` release (per [default release rules](lib/default-release-rules.js)).\n- Commits with `tag` 'New' will be associated with a `minor` release (per [default release rules](lib/default-release-rules.js)).\n- All other commits will not be associated with a release type.\n\n#### External package / file\n\n`releaseRules` can also reference a module, either by it's `npm` name or path:\n```json\n{\n  \"release\": {\n    \"analyzeCommits\": {\n      \"preset\": \"angular\",\n      \"releaseRules\": \"./config/release-rules.js\"\n    }\n  }\n}\n```\n```js\n// File: config/release-rules.js\nmodule.exports = [\n  {type: 'docs', scope: 'README', release: 'patch'},\n  {type: 'refactor', scope: /core-.*/, release: 'minor'},\n  {type: 'refactor', release: 'patch'},\n];\n```\n\n### Parser Options\n\nAllow to overwrite specific [conventional-commits-parser](https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-commits-parser#conventionalcommitsparseroptions) options. This is convenient to use a [conventional-changelog](https://github.com/conventional-changelog/conventional-changelog) preset with some customizations without having to create a new module.\n\nThe following example uses [Angular convention](https://github.com/conventional-changelog/conventional-changelog/blob/master/packages/conventional-changelog-angular/convention.md) but will consider a commit to be a breaking change if [conventional-commits-parser](https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-commits-parser) detects a valid `BREAKING CHANGE`, `BREAKING CHANGES` or `BREAKING` section in the commit body. By default the [preset](https://github.com/conventional-changelog/conventional-changelog/blob/master/packages/conventional-changelog-angular/index.js#L14) checks only for `BREAKING CHANGE` and `BREAKING CHANGES`.\n\n```json\n{\n  \"release\": {\n    \"analyzeCommits\": {\n      \"preset\": \"angular\",\n      \"parserOpts\": {\n        \"noteKeywords\": [\"BREAKING CHANGE\", \"BREAKING CHANGES\", \"BREAKING\"],\n      }\n    }\n  }\n}\n```\n\n## Usage\n\nThe plugin is used by default by [semantic-release](https://github.com/semantic-release/semantic-release) so installing it is not necessary and all configuration are optionals.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/semantic-release/commit-analyzer.git"
  },
  "scripts": {
    "cm": "git-cz",
    "codecov": "codecov -f coverage/coverage-final.json",
    "lint": "xo",
    "pretest": "npm run lint",
    "semantic-release": "semantic-release",
    "test": "nyc ava -v"
  },
  "version": "5.0.3",
  "warnings": [
    {
      "code": "ENOTSUP",
      "required": {
        "node": ">=8.3"
      },
      "pkgid": "@semantic-release/commit-analyzer@5.0.3"
    }
  ],
  "xo": {
    "prettier": true,
    "space": true
  }
}
